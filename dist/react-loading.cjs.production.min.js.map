{"version":3,"file":"react-loading.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import * as React from 'react'\n\nimport { createContext, ReactNode, useContext, useState } from 'react'\n\ninterface LoadingContextInterface {\n  loading: boolean\n  setLoading: (b: boolean) => void\n}\n\nconst LoadingContext = createContext<LoadingContextInterface | null>(null)\n\nexport interface LoadingProviderProps {\n  children: ReactNode\n  component?: ReactNode\n}\n\nexport function LoadingProvider({ children, component }: LoadingProviderProps) {\n  const [loading, setLoading] = useState(false)\n  const value = { loading, setLoading }\n  return (\n    <LoadingContext.Provider value={value}>\n      {loading && component}\n      {children}\n    </LoadingContext.Provider>\n  )\n}\n\nexport function useLoading() {\n  const context = useContext(LoadingContext)\n  if (!context) {\n    throw new Error('useLoading must be used within LoadingProvider')\n  }\n  return context\n}\n\nexport function useAsync(func: () => Promise<any>) {\n  const { setLoading } = useLoading()\n  return async () => {\n    setLoading(true)\n    func().finally(() => setLoading(false))\n  }\n}\n"],"names":["LoadingContext","createContext","useLoading","context","useContext","Error","children","component","useState","loading","React","Provider","value","setLoading","func"],"mappings":"gtNASA,IAAMA,EAAiBC,gBAA8C,eAkBrDC,IACd,IAAMC,EAAUC,aAAWJ,GAC3B,IAAKG,EACH,MAAM,IAAIE,MAAM,kDAElB,OAAOF,0CAhByBG,IAAAA,SAAUC,IAAAA,YACZC,YAAS,GAAhCC,OAEP,OACEC,gBAACV,EAAeW,UAASC,MAFb,CAAEH,QAAAA,EAASI,kBAGpBJ,GAAWF,EACXD,8BAakBQ,GACvB,IAAQD,EAAeX,IAAfW,WACR,mBAAO,aAAA,6BAAA,OAAA,sBAAA,OACLA,GAAW,GACXC,aAAe,WAAA,OAAMD,GAAW,MAF3B,OAAA,UAAA"}